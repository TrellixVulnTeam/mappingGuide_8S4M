import {
  Component,
  OnInit,
  EventEmitter,
  Input,
  ElementRef,
  ViewChild,
} from '@angular/core'; //Output
import {
  ReactiveFormsModule,
  FormControl,
  Validators,
  FormBuilder,
  FormArray,
  FormGroup,
  FormControlName,
} from '@angular/forms';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { Observable } from 'rxjs';
import { TaskService } from 'src/app/services/task.service';
import { COMMA, ENTER } from '@angular/cdk/keycodes';
import { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';
import { MatChipInputEvent } from '@angular/material/chips';
import { map, startWith } from 'rxjs/operators';
interface Group {
  name: string;
  id: string;
}
interface Operation {
  name: string;
}
interface Delimiter {
  name: string;
}
interface Entity {
  name: string;
}
interface columnFieldCategory {
  fieldName: String;
  type: string;
}

@Component({
  selector: 'app-formular',
  templateUrl: './formular.component.html',
  styleUrls: ['./formular.component.css'],
})
export class FormularComponent implements OnInit {
  @Input() columnFieldCategories!: any[];
  mgUI!: FormGroup;
  type!: FormGroup;
  fields?: FormGroup;
  valueMappingForm!: any;
  selectedId!: string;
  newID!: string;
  newType!: string;
  newName!: string;
  selectedEntity!: string;
  combinedId!: string;
  columns!: any;
  procurement!: any;
  columnName!: FormArray;

  selectFormControl = new FormControl('', Validators.required);
  groupIdControl = new FormControl('', Validators.required);
  groups: Group[] = [
    { name: 'Arne', id: 'limbiq-brand-jane-brand' },
    { name: 'Ashik', id: 'limbiq.com-ashikcorp' },
    { name: 'Nina', id: 'limbiq.com-onboardingconsignee' },
  ];
  operationControl = new FormControl('', Validators.required);
  operations: Operation[] = [{ name: 'Import' }, { name: 'Export' }];

  delimiters: Delimiter[] = [
    { name: ',' },
    { name: '.' },
    { name: '/' },
    { name: ';' },
    { name: '-' },
    { name: ':' },
    { name: '#' },
    { name: '+' },
    { name: '*' },
    { name: '=' },
    { name: '&' },
    { name: '@' },
    { name: '$' },
    { name: '!' },
    { name: '„ÄÅ' },
    { name: '\\s' },
  ];
  entityControl = new FormControl('', Validators.required);
  separatorKeysCodes: number[] = [ENTER, COMMA];
  headerCtrl = new FormControl();
  filteredheaders: Observable<string[]>;
  headers: string[] = ['POD'];
  allheaders: string[] = ['MOT', '20//', '40//', '40// HC', '20// HC'];

  @ViewChild('headerInput') headerInput!: ElementRef<HTMLInputElement>;

  constructor(private fb: FormBuilder, private tasks: TaskService) {
    this.filteredheaders = this.headerCtrl.valueChanges.pipe(
      startWith(null),
      map((header: string | null) =>
        header ? this._filter(header) : this.allheaders.slice()
      )
    );
  }

  ngOnInit() {
    this.entity = this.tasks.entity();
    this.shipment = this.tasks.shipment();
    this.procurement = this.tasks.procurement();
    this.type = this.fb.group({
      _id: '',
      name: ['', Validators.required],
      entityType: ['', Validators.required],
    });
    this.fields = this.fb.group({
      fieldName: ['', Validators.required],
      regexToApply: this.fb.group({
        regexToSearch: '',
        replaceWith: '',
        useMatchedValue: false,
      }),
    });
    this.valueMappingForm= this.fb.group({
      limbiqId: '',
      companyId: '',
    });
    this.columnName = this.fb.array([]);
    this.columns = this.fb.array([
      this.fb.group({
        name: [],
        fields: this.fields,
        type: ['', Validators.required],
        csvProperties: this.fb.group({
          csvIndex: '',
        }),
        primaryKeyOrder: [''],
        primaryKeyField: [''],
        multiValueDelimiter: [''],
        deleteWhenNotMatching: [''],
        description: [''],
        enumType: [''],
        valueMapping: this.valueMappingForm,
      }),
    ]);
    this.mgUI = this.fb.group({
      groupId: ['', Validators.required],
      operation: ['', Validators.required],
      type: this.type,
      eachRowUniqueEntity: false,
      matchCargosByOrderNumber: false,
      columns: this.columns,
    });
    this.mgUI.get('groupId')?.valueChanges.subscribe((value) => {
      this.newID = value;
      return this.newID;
    });
    this.type.get('entityType')?.valueChanges.subscribe((value) => {
      this.newType = value;
      return this.newType;
    });
    this.type.get('name')?.valueChanges.subscribe((value) => {
      this.newName = this.newID + '_' + this.newType + '_' + value;
      console.log(this.newName);
    });
    // this.type.get('_id')?.patchValue({
    //   _id: this.newName
    // })
  }
  add(event: MatChipInputEvent): void {
    const value = (event.value || '').trim();

    // Add our header
    if (value) {
      this.headers.push(value);
    }

    // Clear the input value
    event.chipInput!.clear();

    this.headerCtrl.setValue(null);
  }

  remove(header: string): void {
    const index = this.headers.indexOf(header);

    if (index >= 0) {
      this.headers.splice(index, 1);
    }
  }

  selected(event: MatAutocompleteSelectedEvent): void {
    this.headers.push(event.option.viewValue);
    this.headerInput.nativeElement.value = '';
    this.headerCtrl.setValue(null);
  }

  private _filter(value: string): string[] {
    const filterValue = value.toLowerCase();

    return this.allheaders.filter((header) =>
      header.toLowerCase().includes(filterValue)
    );
  }
  entity: any = [];
  shipment: any = [];
  shipmentType: any = [];
  procurementType: any = [];
  columnFieldCategories$: Observable<columnFieldCategory[]> | undefined;
  addNewMapping() {
    const addMapping = this.columns.get('valueMapping') as FormArray
    addMapping.push(
      this.fb.group({
        limbiqId: [''],
        companyId: [''],
      })
    );
  }
  deleteNewMapping(index: number) {
    // const deleteColumn = this.mgUI.get('columns') as FormArray;
    const deleteColumn = this.columns.get('valueMapping') as FormArray;
    deleteColumn.removeAt(index);
  }
  onSelect(entity: any) {
    let entity_id: any;
    if (entity === 'shipment') {
      entity_id = 1;
    } else if (entity === 'procurement') {
      entity_id = 2;
    }
    this.shipment = this.tasks
      .shipment()
      .filter((e) => e.entity_id == entity_id);
    this.procurement = this.tasks
      .procurement()
      .filter((e) => e.entity_id == entity_id);
  }
  onChange(shipment: any, procurement: any) {
    console.log(shipment);
    console.log(this.shipmentType);
    this.shipmentType = this.tasks
      .shipment()
      .filter((e) => e.fieldName == shipment);
    this.procurementType = this.tasks
      .procurement()
      .filter((e) => e.fieldName == procurement);
  }
  get valueMapping() {
    return this.mgUI.get('columns') as FormArray;
    //return this.mgUI.controls['columns'].get('valueMapping') as FormArray
    //return this.columns.get("valueMapping") as FormArray
    //return this.columns.controls["valueMapping"] as FormArray
  }
  addMapping() {
    // const valueMappingForm = this.fb.group({
    //   limbiqId: [''],
    //   companyId: [''],
    // });
    this.valueMapping.push(this.valueMappingForm);
  }

  deleteMapping(mappingIndex: number) {
    //const removeMapping = this.columns.get('valueMapping') as FormArray;
    //removeMapping.removeAt(mappingIndex);
    this.valueMapping.removeAt(mappingIndex);
  }

  get regexFunc() {
    return this.mgUI.controls['columns'] as FormArray;
    //return this.mgUI.controls["columns"] as FormArray
  }

  //regexFuncs = this.mgUI.controls["columns"].get('fields') as FormArray
  addRegex() {
    const regexToApply = this.fb.group({
      regexToSearch: [''],
      replaceWith: [''],
    });
    this.regexFunc.push(regexToApply);
  }

  deleteregex(regexIndex: number) {
    //const removeMapping = this.columns.get('valueMapping') as FormArray;
    //removeMapping.removeAt(mappingIndex);
    this.regexFunc.removeAt(regexIndex);
  }

  onSubmit() {
    console.warn(this.mgUI.value);
  }
}
